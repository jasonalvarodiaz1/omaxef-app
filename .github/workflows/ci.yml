name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      continue-on-error: false
      
    - name: Run tests
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        npm run test:ci
        TEST_EXIT_CODE=$?
        echo "Test exit code: $TEST_EXIT_CODE"
        exit $TEST_EXIT_CODE
      env:
        CI: true
        
    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Check coverage thresholds
      if: matrix.node-version == '20.x'
      run: |
        echo "Checking coverage thresholds..."
        npm run test:coverage -- --coverageReporters=text-summary | tee coverage-summary.txt
        
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          coverage-summary.txt
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Check for PHI exposure risks
      run: |
        echo "Scanning for potential PHI exposure..."
        # Check for console.log with patient data
        if grep -r "console.log.*patient" src/ --include="*.js" --include="*.jsx"; then
          echo "⚠️ Warning: Found console.log statements with 'patient' - verify no PHI is logged"
        fi
        # Check for hardcoded patient identifiers
        if grep -r "patientId.*=.*['\"]P" src/ --include="*.js" --include="*.jsx"; then
          echo "⚠️ Warning: Found hardcoded patient IDs"
        fi
        # Check for TODO/FIXME related to security
        if grep -r "TODO.*security\|FIXME.*PHI\|HACK.*auth" src/ --include="*.js" --include="*.jsx"; then
          echo "⚠️ Warning: Found security-related TODOs"
        fi
        echo "✓ PHI exposure check complete"
      
    - name: Check for secrets in code
      run: |
        echo "Checking for hardcoded secrets..."
        if grep -r "API_KEY\|SECRET\|PASSWORD" src/ --include="*.js" --include="*.jsx" | grep -v "process.env" | grep -v "REACT_APP"; then
          echo "❌ ERROR: Found potential hardcoded secrets!"
          exit 1
        fi
        echo "✓ No hardcoded secrets found"

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create production .env
      run: |
        echo "REACT_APP_FHIR_SERVER_URL=${{ secrets.FHIR_SERVER_URL }}" > .env.production
        echo "REACT_APP_ENABLE_CACHE=true" >> .env.production
        echo "REACT_APP_ENABLE_PHI_REDACTION=true" >> .env.production
        echo "REACT_APP_LOG_LEVEL=warn" >> .env.production
        
    - name: Build application
      run: npm run build
      env:
        CI: true
        NODE_ENV: production
        GENERATE_SOURCEMAP: false
        
    - name: Check build size
      run: |
        BUILD_SIZE=$(du -sb build | cut -f1)
        BUILD_SIZE_MB=$((BUILD_SIZE / 1024 / 1024))
        echo "Build size: ${BUILD_SIZE_MB}MB"
        if [ $BUILD_SIZE_MB -gt 10 ]; then
          echo "⚠️ Warning: Build size is larger than 10MB"
        fi
        
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build/
        retention-days: 7
        
    - name: Archive production .env template
      uses: actions/upload-artifact@v4
      with:
        name: env-template
        path: .env.production
        retention-days: 7

  status-check:
    name: Status String Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for literal status strings
      run: |
        echo "Checking for hardcoded status strings..."
        # Look for status comparisons that don't use CriteriaStatus enum
        if grep -r "status.*===.*['\"]MET\|status.*===.*['\"]NOT_MET\|status.*===.*['\"]PENDING" src/utils src/components --include="*.js" --include="*.jsx" | grep -v "CriteriaStatus\|normalizeStatus"; then
          echo "⚠️ Warning: Found potential hardcoded status strings. Use CriteriaStatus enum and normalizeStatus()."
          echo "This is a warning, not blocking the build yet."
        else
          echo "✓ No hardcoded status strings found"
        fi
        
    - name: Check for normalized status usage
      run: |
        echo "Verifying normalizeStatus usage..."
        # Check if files comparing statuses import normalizeStatus
        FILES_WITH_STATUS=$(grep -l "\.status" src/utils/*.js src/components/*.js 2>/dev/null || true)
        if [ ! -z "$FILES_WITH_STATUS" ]; then
          for file in $FILES_WITH_STATUS; do
            if ! grep -q "normalizeStatus" "$file"; then
              echo "⚠️ Warning: $file uses .status but doesn't import normalizeStatus"
            fi
          done
        fi
        echo "✓ Status normalization check complete"

  documentation-check:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README exists and is current
      run: |
        if [ ! -f README.md ]; then
          echo "❌ README.md not found"
          exit 1
        fi
        # Check if README mentions key components
        if ! grep -q "criteriaEvaluator\|coverageLogic" README.md; then
          echo "⚠️ Warning: README may be outdated - doesn't mention core modules"
        fi
        echo "✓ README check complete"
        
    - name: Check for TODO/FIXME in critical files
      run: |
        echo "Checking for unresolved TODOs in critical files..."
        CRITICAL_FILES="src/utils/criteriaEvaluator.js src/utils/coverageEvaluator.js src/utils/coverageLogic.js"
        for file in $CRITICAL_FILES; do
          if [ -f "$file" ]; then
            TODO_COUNT=$(grep -c "TODO\|FIXME\|HACK" "$file" || true)
            if [ $TODO_COUNT -gt 0 ]; then
              echo "⚠️ $file has $TODO_COUNT TODO/FIXME/HACK comments"
              grep -n "TODO\|FIXME\|HACK" "$file" || true
            fi
          fi
        done
        echo "✓ TODO check complete"

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check production configuration
      run: |
        echo "Checking production readiness..."
        ISSUES=0
        
        # Check for .env.example
        if [ ! -f .env.example ]; then
          echo "❌ .env.example not found"
          ISSUES=$((ISSUES + 1))
        fi
        
        # Check for security config
        if [ ! -f src/config/security.js ]; then
          echo "⚠️ Warning: security.js not found"
        fi
        
        # Check for monitoring
        if [ ! -f src/utils/monitoring.js ]; then
          echo "⚠️ Warning: monitoring.js not found"
        fi
        
        # Check server token exchange
        if [ -f server/tokenExchange.js ]; then
          if grep -q "YOUR_CLIENT_SECRET" server/tokenExchange.js; then
            echo "❌ Token exchange has placeholder secrets"
            ISSUES=$((ISSUES + 1))
          fi
        fi
        
        if [ $ISSUES -gt 0 ]; then
          echo "❌ Found $ISSUES critical deployment issues"
          exit 1
        fi
        
        echo "✓ Deployment readiness check passed"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, build, status-check, documentation-check]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Lint & Test**: ${{ needs.lint-and-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status Check**: ${{ needs.status-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Documentation**: ${{ needs.documentation-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review any warnings in the logs" >> $GITHUB_STEP_SUMMARY
        echo "2. Ensure all tests pass before merging" >> $GITHUB_STEP_SUMMARY
        echo "3. Check coverage report for gaps" >> $GITHUB_STEP_SUMMARY